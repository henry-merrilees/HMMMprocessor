$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 U clk $end
  $var wire  1 V reset $end
  $scope module hmmm $end
   $var wire  1 + ALUSrcA $end
   $var wire  2 & ALUSrcB [1:0] $end
   $var wire 16 # Instr [15:0] $end
   $var wire  1 ) MemAdrSrc $end
   $var wire  1 * MemDataSrc $end
   $var wire  1 ' MemWrite $end
   $var wire  2 % PcSrc [1:0] $end
   $var wire  2 $ RegSrc [1:0] $end
   $var wire  1 ( RegWrite $end
   $var wire 32 , alu_op [31:0] $end
   $var wire  1 U clk $end
   $var wire 32 - instruction_type [31:0] $end
   $var wire  1 V reset $end
   $scope module controller $end
    $var wire  1 + ALUSrcA $end
    $var wire  2 & ALUSrcB [1:0] $end
    $var wire  1 ) MemAdrSrc $end
    $var wire  1 * MemDataSrc $end
    $var wire  1 ' MemWrite $end
    $var wire  2 % PcSrc [1:0] $end
    $var wire  2 $ RegSrc [1:0] $end
    $var wire  1 ( RegWrite $end
    $var wire 32 , alu_op [31:0] $end
    $var wire 16 # instr [15:0] $end
    $var wire 32 - instruction_type [31:0] $end
   $upscope $end
   $scope module datapath $end
    $var wire  1 + ALUSrcA $end
    $var wire  2 & ALUSrcB [1:0] $end
    $var wire  8 1 Imm [7:0] $end
    $var wire 16 B ImmExt [15:0] $end
    $var wire 16 # Instr [15:0] $end
    $var wire  1 ) MemAdrSrc $end
    $var wire  1 * MemDataSrc $end
    $var wire  1 ' MemWrite $end
    $var wire  8 . Pc [7:0] $end
    $var wire  8 W PcNext [7:0] $end
    $var wire  8 / PcPlus2 [7:0] $end
    $var wire  2 % PcSrc [1:0] $end
    $var wire  8 0 PcTarget [7:0] $end
    $var wire  2 $ RegSrc [1:0] $end
    $var wire  1 ( RegWrite $end
    $var wire 32 , alu_op [31:0] $end
    $var wire 16 4 alu_result [15:0] $end
    $var wire 16 5 alu_src_a [15:0] $end
    $var wire 16 6 alu_src_b [15:0] $end
    $var wire  1 U clk $end
    $var wire 32 - instruction_type [31:0] $end
    $var wire  8 2 mem_data_address [7:0] $end
    $var wire 16 : mem_read_data [15:0] $end
    $var wire 16 ; mem_write_data [15:0] $end
    $var wire  4 < rX [3:0] $end
    $var wire  4 = rY [3:0] $end
    $var wire  4 > rZ [3:0] $end
    $var wire  1 V reset $end
    $var wire 16 3 result [15:0] $end
    $var wire 16 7 rf_read_data_1 [15:0] $end
    $var wire 16 8 rf_read_data_2 [15:0] $end
    $var wire 16 9 rf_read_data_3 [15:0] $end
    $var wire  1 @ sign $end
    $var wire  1 A take_jump $end
    $var wire  1 ? zero $end
    $scope module alu $end
     $var wire 32 , alu_op [31:0] $end
     $var wire 16 4 alu_result [15:0] $end
     $var wire  1 @ sign $end
     $var wire 16 5 src_a [15:0] $end
     $var wire 16 6 src_b [15:0] $end
     $var wire  1 ? zero $end
    $upscope $end
    $scope module mem $end
     $var wire  1 U clk $end
     $var wire  8 2 data_address [7:0] $end
     $var wire  8 . instruction_address [7:0] $end
     $var wire 16 # instruction_data [15:0] $end
     $var wire 16 : read_data [15:0] $end
     $var wire 16 ; write_data [15:0] $end
     $var wire  1 ' write_en $end
    $upscope $end
    $scope module rf $end
     $var wire  4 < address_1 [3:0] $end
     $var wire  4 = address_2 [3:0] $end
     $var wire  4 > address_3 [3:0] $end
     $var wire  1 U clk $end
     $var wire 16 7 read_data_1 [15:0] $end
     $var wire 16 8 read_data_2 [15:0] $end
     $var wire 16 9 read_data_3 [15:0] $end
     $var wire 16 C registers[0] [15:0] $end
     $var wire 16 M registers[10] [15:0] $end
     $var wire 16 N registers[11] [15:0] $end
     $var wire 16 O registers[12] [15:0] $end
     $var wire 16 P registers[13] [15:0] $end
     $var wire 16 Q registers[14] [15:0] $end
     $var wire 16 R registers[15] [15:0] $end
     $var wire 16 D registers[1] [15:0] $end
     $var wire 16 E registers[2] [15:0] $end
     $var wire 16 F registers[3] [15:0] $end
     $var wire 16 G registers[4] [15:0] $end
     $var wire 16 H registers[5] [15:0] $end
     $var wire 16 I registers[6] [15:0] $end
     $var wire 16 J registers[7] [15:0] $end
     $var wire 16 K registers[8] [15:0] $end
     $var wire 16 L registers[9] [15:0] $end
     $var wire 16 3 write_data_1 [15:0] $end
     $var wire  1 ( write_en_1 $end
    $upscope $end
    $scope module unnamedblk1 $end
     $var wire 32 S i [31:0] $end
    $upscope $end
    $scope module unnamedblk2 $end
     $var wire 32 T i [31:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0001000100000101 #
b00 $
b00 %
b00 &
0'
1(
0)
0*
0+
b00000000000000000000000000000000 ,
b00000000000000000000000000000100 -
b00000000 .
b00000010 /
b00001010 0
b00000101 1
b00000101 2
b0000000000000101 3
b0000000000000000 4
b0000000000000000 5
b0000000000000000 6
b0000000000000000 7
b0000000000000000 8
b0000000000000000 9
b1011000000000010 :
b0000000000000000 ;
b0001 <
b0000 =
b0101 >
1?
0@
1A
b0000000000000101 B
b0000000000000000 C
b0000000000000000 D
b0000000000000000 E
b0000000000000000 F
b0000000000000000 G
b0000000000000000 H
b0000000000000000 I
b0000000000000000 J
b0000000000000000 K
b0000000000000000 L
b0000000000000000 M
b0000000000000000 N
b0000000000000000 O
b0000000000000000 P
b0000000000000000 Q
b0000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
1U
1V
b00000000 W
#1
0U
#2
b0001001000000001 #
b00000010 .
b00000100 /
b00000010 0
b00000001 1
b00000001 2
b0000000000000001 3
b0000000000000101 4
b0000000000000101 6
b0000000000000101 9
b0001001000000001 :
b0000000000000101 ;
b0010 <
b0001 >
0?
b0000000000000001 B
b0000000000000101 D
1U
0V
b00000100 W
#3
0U
#4
b1100000100000110 #
b10 %
b10 &
0(
1+
b00000000000000000000000000010101 -
b00000100 .
b00000110 /
b00001100 0
b00000110 1
b00000110 2
b0000000000000110 3
b0000000000000101 5
b0000000000000000 6
b0000000000000101 7
b0000000000000000 9
b0000001000000010 :
b0001 <
b0110 >
0A
b0000000000000110 B
b0000000000000001 E
1U
b00000110 W
#5
0U
#6
b1000001000010010 #
b11 $
b00 %
b00 &
1(
0+
b00000000000000000000000000000010 ,
b00000000000000000000000000010000 -
b00000110 .
b00001000 /
b00100100 0
b00010010 1
b00010010 2
b0000000000000101 3
b0000000000000001 6
b0000000000000001 7
b0000000000000101 8
b0000000000000001 9
b0000000000000000 :
b0010 <
b0001 =
b0010 >
1A
b0000000000010010 B
1U
b00001000 W
#7
0U
#8
b0101000111111111 #
b01 &
1+
b00000000000000000000000000000000 ,
b00000000000000000000000000001011 -
b00001000 .
b00001010 /
b11111110 0
b11111111 1
b11111111 2
b0000000000000100 3
b0000000000000100 4
b1111111111111111 6
b0000000000000101 7
b0000000000000000 8
b0000000000000000 9
b0000000000000100 ;
b0001 <
b1111 =
b1111 >
b1111111111111111 B
b0000000000000101 E
1U
b00001010 W
#9
0U
#10
b1011000000000010 #
b00 $
b10 %
b00 &
0(
0+
b00000000000000000000000000010100 -
b00001010 .
b00001100 /
b00000100 0
b00000010 1
b00000010 2
b0000000000000010 3
b0000000000000101 4
b0000000000000000 5
b0000000000000101 6
b0000000000000000 7
b0000000000000101 9
b1100000100000110 :
b0000000000000101 ;
b0000 <
b0000 =
b0010 >
b0000000000000010 B
b0000000000000100 D
1U
b00000100 W
#11
0U
#12
b1100000100000110 #
b10 &
1+
b00000000000000000000000000010101 -
b00000100 .
b00000110 /
b00001100 0
b00000110 1
b00000110 2
b0000000000000110 3
b0000000000000100 4
b0000000000000100 5
b0000000000000000 6
b0000000000000100 7
b0000000000000000 9
b0000001000000010 :
b0000000000000100 ;
b0001 <
b0110 >
0A
b0000000000000110 B
1U
b00000110 W
#13
0U
#14
b1000001000010010 #
b11 $
b00 %
b00 &
1(
0+
b00000000000000000000000000000010 ,
b00000000000000000000000000010000 -
b00000110 .
b00001000 /
b00100100 0
b00010010 1
b00010010 2
b0000000000010100 3
b0000000000010100 4
b0000000000000101 6
b0000000000000101 7
b0000000000000100 8
b0000000000000101 9
b0000000000000000 :
b0000000000010100 ;
b0010 <
b0001 =
b0010 >
1A
b0000000000010010 B
1U
b00001000 W
#15
0U
#16
b0101000111111111 #
b01 &
1+
b00000000000000000000000000000000 ,
b00000000000000000000000000001011 -
b00001000 .
b00001010 /
b11111110 0
b11111111 1
b11111111 2
b0000000000000011 3
b0000000000000011 4
b1111111111111111 6
b0000000000000100 7
b0000000000000000 8
b0000000000000000 9
b0000000000000011 ;
b0001 <
b1111 =
b1111 >
b1111111111111111 B
b0000000000010100 E
1U
b00001010 W
#17
0U
#18
b1011000000000010 #
b00 $
b10 %
b00 &
0(
0+
b00000000000000000000000000010100 -
b00001010 .
b00001100 /
b00000100 0
b00000010 1
b00000010 2
b0000000000000010 3
b0000000000010100 4
b0000000000000000 5
b0000000000010100 6
b0000000000000000 7
b0000000000010100 9
b1100000100000110 :
b0000000000010100 ;
b0000 <
b0000 =
b0010 >
b0000000000000010 B
b0000000000000011 D
1U
b00000100 W
#19
0U
#20
b1100000100000110 #
b10 &
1+
b00000000000000000000000000010101 -
b00000100 .
b00000110 /
b00001100 0
b00000110 1
b00000110 2
b0000000000000110 3
b0000000000000011 4
b0000000000000011 5
b0000000000000000 6
b0000000000000011 7
b0000000000000000 9
b0000001000000010 :
b0000000000000011 ;
b0001 <
b0110 >
0A
b0000000000000110 B
1U
b00000110 W
#21
0U
#22
b1000001000010010 #
b11 $
b00 %
b00 &
1(
0+
b00000000000000000000000000000010 ,
b00000000000000000000000000010000 -
b00000110 .
b00001000 /
b00100100 0
b00010010 1
b00010010 2
b0000000000111100 3
b0000000000111100 4
b0000000000010100 6
b0000000000010100 7
b0000000000000011 8
b0000000000010100 9
b0000000000000000 :
b0000000000111100 ;
b0010 <
b0001 =
b0010 >
1A
b0000000000010010 B
1U
b00001000 W
#23
0U
#24
b0101000111111111 #
b01 &
1+
b00000000000000000000000000000000 ,
b00000000000000000000000000001011 -
b00001000 .
b00001010 /
b11111110 0
b11111111 1
b11111111 2
b0000000000000010 3
b0000000000000010 4
b1111111111111111 6
b0000000000000011 7
b0000000000000000 8
b0000000000000000 9
b0000000000000010 ;
b0001 <
b1111 =
b1111 >
b1111111111111111 B
b0000000000111100 E
1U
b00001010 W
#25
0U
#26
b1011000000000010 #
b00 $
b10 %
b00 &
0(
0+
b00000000000000000000000000010100 -
b00001010 .
b00001100 /
b00000100 0
b00000010 1
b00000010 2
b0000000000111100 4
b0000000000000000 5
b0000000000111100 6
b0000000000000000 7
b0000000000111100 9
b1100000100000110 :
b0000000000111100 ;
b0000 <
b0000 =
b0010 >
b0000000000000010 B
b0000000000000010 D
1U
b00000100 W
#27
0U
#28
b1100000100000110 #
b10 &
1+
b00000000000000000000000000010101 -
b00000100 .
b00000110 /
b00001100 0
b00000110 1
b00000110 2
b0000000000000110 3
b0000000000000010 4
b0000000000000010 5
b0000000000000000 6
b0000000000000010 7
b0000000000000000 9
b0000001000000010 :
b0000000000000010 ;
b0001 <
b0110 >
0A
b0000000000000110 B
1U
b00000110 W
#29
0U
#30
b1000001000010010 #
b11 $
b00 %
b00 &
1(
0+
b00000000000000000000000000000010 ,
b00000000000000000000000000010000 -
b00000110 .
b00001000 /
b00100100 0
b00010010 1
b00010010 2
b0000000001111000 3
b0000000001111000 4
b0000000000111100 6
b0000000000111100 7
b0000000000000010 8
b0000000000111100 9
b0000000000000000 :
b0000000001111000 ;
b0010 <
b0001 =
b0010 >
1A
b0000000000010010 B
1U
b00001000 W
#31
0U
#32
b0101000111111111 #
b01 &
1+
b00000000000000000000000000000000 ,
b00000000000000000000000000001011 -
b00001000 .
b00001010 /
b11111110 0
b11111111 1
b11111111 2
b0000000000000001 3
b0000000000000001 4
b1111111111111111 6
b0000000000000010 7
b0000000000000000 8
b0000000000000000 9
b0000000000000001 ;
b0001 <
b1111 =
b1111 >
b1111111111111111 B
b0000000001111000 E
1U
b00001010 W
#33
0U
#34
b1011000000000010 #
b00 $
b10 %
b00 &
0(
0+
b00000000000000000000000000010100 -
b00001010 .
b00001100 /
b00000100 0
b00000010 1
b00000010 2
b0000000000000010 3
b0000000001111000 4
b0000000000000000 5
b0000000001111000 6
b0000000000000000 7
b0000000001111000 9
b1100000100000110 :
b0000000001111000 ;
b0000 <
b0000 =
b0010 >
b0000000000000010 B
b0000000000000001 D
1U
b00000100 W
#35
0U
#36
b1100000100000110 #
b10 &
1+
b00000000000000000000000000010101 -
b00000100 .
b00000110 /
b00001100 0
b00000110 1
b00000110 2
b0000000000000110 3
b0000000000000001 4
b0000000000000001 5
b0000000000000000 6
b0000000000000001 7
b0000000000000000 9
b0000001000000010 :
b0000000000000001 ;
b0001 <
b0110 >
0A
b0000000000000110 B
1U
b00000110 W
#37
0U
#38
b1000001000010010 #
b11 $
b00 %
b00 &
1(
0+
b00000000000000000000000000000010 ,
b00000000000000000000000000010000 -
b00000110 .
b00001000 /
b00100100 0
b00010010 1
b00010010 2
b0000000001111000 3
b0000000001111000 4
b0000000001111000 6
b0000000001111000 7
b0000000000000001 8
b0000000001111000 9
b0000000000000000 :
b0000000001111000 ;
b0010 <
b0001 =
b0010 >
1A
b0000000000010010 B
1U
b00001000 W
#39
0U
#40
b0101000111111111 #
b01 &
1+
b00000000000000000000000000000000 ,
b00000000000000000000000000001011 -
b00001000 .
b00001010 /
b11111110 0
b11111111 1
b11111111 2
b0000000000000000 3
b0000000000000000 4
b1111111111111111 6
b0000000000000001 7
b0000000000000000 8
b0000000000000000 9
b0000000000000000 ;
b0001 <
b1111 =
b1111 >
1?
b1111111111111111 B
1U
b00001010 W
#41
0U
#42
b1011000000000010 #
b00 $
b10 %
b00 &
0(
0+
b00000000000000000000000000010100 -
b00001010 .
b00001100 /
b00000100 0
b00000010 1
b00000010 2
b0000000000000010 3
b0000000001111000 4
b0000000000000000 5
b0000000001111000 6
b0000000000000000 7
b0000000001111000 9
b1100000100000110 :
b0000000001111000 ;
b0000 <
b0000 =
b0010 >
0?
b0000000000000010 B
b0000000000000000 D
1U
b00000100 W
#43
0U
#44
b1100000100000110 #
b10 &
1+
b00000000000000000000000000010101 -
b00000100 .
b00000110 /
b00001100 0
b00000110 1
b00000110 2
b0000000000000110 3
b0000000000000000 4
b0000000000000000 6
b0000000000000000 9
b0000001000000010 :
b0000000000000000 ;
b0001 <
b0110 >
1?
b0000000000000110 B
1U
b00001100 W
#45
0U
#46
b0000001000000010 #
b00 %
b00 &
0+
b00000000000000000000000000000011 -
b00001100 .
b00001110 /
b00000100 0
b00000010 1
b00000010 2
b0000000000000010 3
b0000000001111000 4
b0000000001111000 6
b0000000001111000 7
b0000000001111000 9
b1100000100000110 :
b0000000001111000 ;
b0010 <
b0010 >
0?
b0000000000000010 B
1U
b00001110 W
#47
0U
#48
b0000000000000000 #
b00000000000000000000000000000000 -
b00001110 .
b00010000 /
b00000000 0
b00000000 1
b00000000 2
b0000000000000000 3
b0000000000000000 4
b0000000000000000 6
b0000000000000000 7
b0000000000000000 9
b0001000100000101 :
b0000000000000000 ;
b0000 <
b0000 >
1?
b0000000000000000 B
1U
b00010000 W
#49
0U
#50
b00010000 .
b00010010 /
b00000000000000000000000000001111 S
b00000000000000000000000011111111 T
1U
b00010010 W
